/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v1/health": {
    /** Health check */
    get: {
      responses: {
        /** @description Service is healthy */
        200: {
          content: {
            "application/json": components["schemas"]["HealthResponse"];
          };
        };
      };
    };
  };
  "/api/v1/comparisons": {
    /** List published comparisons */
    get: {
      parameters: {
        query?: {
          page?: number;
          pageSize?: number;
          sort?: "popular" | "recent" | "closingSoon";
          tag?: string;
        };
      };
      responses: {
        /** @description List of comparisons */
        200: {
          content: {
            "application/json": components["schemas"]["ComparisonListResponse"];
          };
        };
      };
    };
    /** Create a new comparison */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateComparisonRequest"];
        };
      };
      responses: {
        /** @description Comparison created */
        201: {
          content: {
            "application/json": components["schemas"]["ComparisonResponse"];
          };
        };
        400: components["responses"]["BadRequest"];
        401: components["responses"]["Unauthorized"];
      };
    };
  };
  "/api/v1/comparisons/{comparisonId}": {
    /** Get comparison detail */
    get: {
      parameters: {
        path: {
          comparisonId: components["parameters"]["ComparisonId"];
        };
      };
      responses: {
        /** @description Comparison detail */
        200: {
          content: {
            "application/json": components["schemas"]["ComparisonResponse"];
          };
        };
        404: components["responses"]["NotFound"];
      };
    };
    /** Update comparison */
    patch: {
      parameters: {
        path: {
          comparisonId: components["parameters"]["ComparisonId"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateComparisonRequest"];
        };
      };
      responses: {
        /** @description Comparison updated */
        200: {
          content: {
            "application/json": components["schemas"]["ComparisonResponse"];
          };
        };
        400: components["responses"]["BadRequest"];
        401: components["responses"]["Unauthorized"];
        403: components["responses"]["Forbidden"];
        404: components["responses"]["NotFound"];
      };
    };
  };
  "/api/v1/comparisons/{comparisonId}/publish": {
    /** Publish comparison */
    post: {
      parameters: {
        path: {
          comparisonId: components["parameters"]["ComparisonId"];
        };
      };
      responses: {
        /** @description Comparison published */
        204: {
          content: never;
        };
        400: components["responses"]["BadRequest"];
        401: components["responses"]["Unauthorized"];
        403: components["responses"]["Forbidden"];
        404: components["responses"]["NotFound"];
      };
    };
  };
  "/api/v1/comparisons/{comparisonId}/results": {
    /** Get comparison results */
    get: {
      parameters: {
        path: {
          comparisonId: components["parameters"]["ComparisonId"];
        };
      };
      responses: {
        /** @description Aggregated voting results */
        200: {
          content: {
            "application/json": components["schemas"]["ComparisonResultsResponse"];
          };
        };
        404: components["responses"]["NotFound"];
      };
    };
  };
  "/api/v1/votes": {
    /** Submit a vote */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["SubmitVoteRequest"];
        };
      };
      responses: {
        /** @description Vote recorded */
        201: {
          content: {
            "application/json": components["schemas"]["VoteResponse"];
          };
        };
        400: components["responses"]["BadRequest"];
        401: components["responses"]["Unauthorized"];
        403: components["responses"]["Forbidden"];
        409: components["responses"]["Conflict"];
      };
    };
  };
  "/api/v1/me/comparisons": {
    /** List comparisons owned by current user */
    get: {
      responses: {
        /** @description Owned comparisons */
        200: {
          content: {
            "application/json": components["schemas"]["ComparisonListResponse"];
          };
        };
        401: components["responses"]["Unauthorized"];
      };
    };
  };
  "/api/v1/me/analytics": {
    /** Analytics for the current user's comparisons */
    get: {
      responses: {
        /** @description Analytics summary */
        200: {
          content: {
            "application/json": components["schemas"]["AnalyticsResponse"];
          };
        };
        401: components["responses"]["Unauthorized"];
      };
    };
  };
  "/api/v1/webhooks/stackblitz": {
    /** Handle StackBlitz project update webhook */
    post: {
      requestBody: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
      responses: {
        /** @description Webhook accepted */
        202: {
          content: never;
        };
        400: components["responses"]["BadRequest"];
        401: components["responses"]["Unauthorized"];
      };
    };
  };
  "/api/v1/admin/recalculate": {
    /** Recalculate voting analytics (admin) */
    post: {
      responses: {
        /** @description Recalculation started */
        202: {
          content: never;
        };
        401: components["responses"]["Unauthorized"];
        403: components["responses"]["Forbidden"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    HealthResponse: {
      /** @example ok */
      status?: string;
      /** Format: date-time */
      timestamp?: string;
    };
    ComparisonListResponse: {
      data?: components["schemas"]["Comparison"][];
      pagination?: components["schemas"]["Pagination"];
    };
    ComparisonResponse: {
      data?: components["schemas"]["Comparison"];
    };
    Comparison: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      ownerId: string;
      title: string;
      summary: string;
      /** @enum {string} */
      status: "draft" | "published" | "closed";
      tags?: string[];
      /** Format: date-time */
      publishedAt?: string | null;
      /** Format: date-time */
      expiresAt?: string | null;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      variants: components["schemas"]["Variant"][];
    };
    Variant: {
      /** Format: uuid */
      id: string;
      label: string;
      /** Format: uri */
      stackblitzUrl: string;
      /** Format: uri */
      thumbnailUrl?: string | null;
      displayOrder: number;
      /** Format: date-time */
      createdAt?: string;
    };
    CreateComparisonRequest: {
      title: string;
      summary: string;
      tags?: string[];
      /** Format: date-time */
      publishedAt: string;
      /** Format: date-time */
      expiresAt: string;
      variants: components["schemas"]["CreateVariant"][];
    };
    CreateVariant: {
      label: string;
      /** Format: uri */
      stackblitzUrl: string;
      /** Format: uri */
      thumbnailUrl?: string | null;
    };
    UpdateComparisonRequest: {
      title?: string;
      summary?: string;
      tags?: string[];
      /** Format: date-time */
      publishedAt?: string;
      /** Format: date-time */
      expiresAt?: string;
      variants?: components["schemas"]["UpdateVariant"][];
      /** @enum {string} */
      status?: "draft" | "published" | "closed";
    };
    UpdateVariant: components["schemas"]["CreateVariant"] & {
      /** Format: uuid */
      id?: string;
      displayOrder?: number;
    };
    SubmitVoteRequest: {
      /** Format: uuid */
      comparisonId: string;
      /** Format: uuid */
      variantId: string;
      comment?: string;
      turnstileToken: string;
    };
    VoteResponse: {
      data?: components["schemas"]["VoteRecord"];
    };
    VoteRecord: {
      /** Format: uuid */
      voteSessionId?: string;
      /** Format: uuid */
      variantId?: string;
      /** Format: date-time */
      submittedAt?: string;
    };
    ComparisonResultsResponse: {
      data?: {
        /** Format: uuid */
        comparisonId?: string;
        totalVotes?: number;
        breakdown?: components["schemas"]["VariantResult"][];
        timeline?: components["schemas"]["TimelinePoint"][];
        comments?: components["schemas"]["VoteComment"][];
      };
    };
    VariantResult: {
      /** Format: uuid */
      variantId?: string;
      label?: string;
      votes?: number;
      /** Format: float */
      percentage?: number;
    };
    TimelinePoint: {
      /** Format: date-time */
      timestamp?: string;
      variantVotes?: {
        [key: string]: number;
      };
    };
    VoteComment: {
      /** Format: uuid */
      variantId?: string;
      comment?: string;
      /** Format: date-time */
      createdAt?: string;
    };
    AnalyticsResponse: {
      data?: components["schemas"]["ComparisonAnalytics"][];
    };
    ComparisonAnalytics: {
      /** Format: uuid */
      comparisonId?: string;
      title?: string;
      totalVotes?: number;
      conversionRate?: number;
      dailyBreakdown?: components["schemas"]["TimelinePoint"][];
    };
    Pagination: {
      page?: number;
      pageSize?: number;
      totalPages?: number;
      totalItems?: number;
    };
    ErrorResponse: {
      code?: string;
      message?: string;
      traceId?: string;
    };
  };
  responses: {
    /** @description Bad request */
    BadRequest: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /** @description Invalid or missing authentication */
    Unauthorized: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /** @description Operation forbidden */
    Forbidden: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /** @description Resource not found */
    NotFound: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /** @description Conflict (duplicate action) */
    Conflict: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
  };
  parameters: {
    /** @description Comparison identifier (UUID) */
    ComparisonId: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
